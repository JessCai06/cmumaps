generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// Removing the Python client generator that's causing issues
// If you need this generator, you'll need to install it in your Dockerfile
// generator pyClient {
//   provider             = "prisma-client-py"
//   recursive_type_depth = "-1"
// }
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Building {
  buildingCode   String  @id
  name           String
  osmId          String?
  labelLatitude  Float
  labelLongitude Float
  shape          Json
  hitbox         Json?
  defaultOrdinal Int?
  floors         Floor[]
}

model Floor {
  buildingCode    String
  floorLevel      String
  isDefault       Boolean
  centerX         Float
  centerY         Float
  centerLatitude  Float
  centerLongitude Float
  scale           Float
  angle           Float
  altitude        Float?
  building        Building @relation(fields: [buildingCode], references: [buildingCode])
  nodes           Node[]
  rooms           Room[]

  @@id([buildingCode, floorLevel])
}

model Room {
  roomId         String  @id
  name           String
  type           String
  labelLatitude  Float
  labelLongitude Float
  polygon        Json
  buildingCode   String?
  floorLevel     String?
  aliases        Alias[]
  nodes          Node[]
  floor          Floor?  @relation(fields: [buildingCode, floorLevel], references: [buildingCode, floorLevel])
  
  @@index([buildingCode, floorLevel])
}

model Alias {
  alias          String
  isDisplayAlias Boolean
  roomId         String
  room           Room    @relation(fields: [roomId], references: [roomId])

  @@id([roomId, alias])
}

model Node {
  nodeId       String  @id
  latitude     Float
  longitude    Float
  buildingCode String?
  floorLevel   String?
  roomId       String?
  outEdges     Edge[]  @relation("OutEdges")
  inEdges      Edge[]  @relation("InEdges")
  floor        Floor?  @relation(fields: [buildingCode, floorLevel], references: [buildingCode, floorLevel])
  room         Room?   @relation(fields: [roomId], references: [roomId])
  poi          Poi?

  @@index([buildingCode, floorLevel])
}

model Edge {
  inNodeId  String
  outNodeId String
  inNode    Node   @relation("OutEdges", fields: [inNodeId], references: [nodeId])
  outNode   Node   @relation("InEdges", fields: [outNodeId], references: [nodeId])

  @@id([inNodeId, outNodeId])
}

model Poi {
  poiId  String @id
  type   String
  nodeId String @unique
  node   Node   @relation(fields: [nodeId], references: [nodeId])
}