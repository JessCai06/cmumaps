/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/floors/{floorCode}/floorplan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetFloorplan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/buildings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetBuildings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/buildings/{buildingCode}/default-floor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetDefaultFloor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/userInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        GeoCoordinate: {
            /** Format: double */
            latitude: number;
            /** Format: double */
            longitude: number;
        };
        Floor: {
            buildingCode: string;
            level: string;
        };
        /** @enum {string} */
        RoomType: "" | "Default" | "Corridor" | "Auditorium" | "Office" | "Classroom" | "Operational" | "Conference" | "Study" | "Laboratory" | "Computer Lab" | "Studio" | "Workshop" | "Vestibule" | "Storage" | "Restroom" | "Stairs" | "Elevator" | "Ramp" | "Dining" | "Food" | "Store" | "Library" | "Sport" | "Parking" | "Inaccessible";
        GeoRoom: {
            /** @description The coordinates of the label of the room */
            labelPosition: components["schemas"]["GeoCoordinate"];
            /** @description the floor that the room is on */
            floor: components["schemas"]["Floor"];
            /** @description The type of the room */
            type: components["schemas"]["RoomType"];
            /** @description The name under which the room is known (e.g. 'McConomy Auditorium')
             *     The one that will be displayed. */
            alias?: string;
            /** @description Points to display on map */
            points: components["schemas"]["GeoCoordinate"][][];
        };
        /** @description Construct a type with a set of properties K of type T */
        "Record_string.GeoRoom_": {
            [key: string]: components["schemas"]["GeoRoom"];
        };
        GeoRooms: components["schemas"]["Record_string.GeoRoom_"];
        Building: {
            code: string;
            name: string;
            isMapped: boolean;
            /** Format: double */
            defaultOrdinal: number | null;
            defaultFloor: string | null;
            floors: string[];
            /** Format: double */
            labelLatitude: number;
            /** Format: double */
            labelLongitude: number;
            shape: components["schemas"]["GeoCoordinate"][][];
            hitbox: components["schemas"]["GeoCoordinate"][];
        };
        /** @description Construct a type with a set of properties K of type T */
        "Record_string.Building_": {
            [key: string]: components["schemas"]["Building"];
        };
        Buildings: components["schemas"]["Record_string.Building_"];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetFloorplan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                floorCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GeoRooms"];
                };
            };
        };
    };
    GetBuildings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Buildings"];
                };
            };
        };
    };
    GetDefaultFloor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                buildingCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    UserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                    };
                };
            };
        };
    };
}
