generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Building {
  buildingCode   String  @id @default(uuid())
  name           String
  osmId          String?
  defaultFloor   String
  labelLatitude  Float
  labelLongitude Float
  shape          Json
  hitbox         Json
  floors         Floor[]
}

model Floor {
  buildingCode    String
  floorLevel      String
  centerX         Float
  centerY         Float
  centerLatitude  Float
  centerLongitude Float
  scale           Float
  angle           Float
  altitude        Float?
  elements        Element[]
  building        Building  @relation(fields: [buildingCode], references: [buildingCode])
  Node            Node[]

  @@id([buildingCode, floorLevel])
}

model Element {
  elementId      String  @id
  labelLatitude  Float
  labelLongitude Float
  type           String
  buildingCode   String?
  floorLevel     String?
  floor          Floor?  @relation(fields: [buildingCode, floorLevel], references: [buildingCode, floorLevel])
  nodes          Node[]
  poi            Poi?
  room           Room?

  @@index([buildingCode, floorLevel])
}

model Poi {
  elementId String  @id
  element   Element @relation(fields: [elementId], references: [elementId])
}

model Room {
  elementId    String   @id
  name         String
  displayAlias String?
  polygon      Json
  updatedAt    DateTime @updatedAt
  aliases      Alias[]
  element      Element  @relation(fields: [elementId], references: [elementId])
}

model Node {
  id           String   @id @default(uuid())
  latitude     Float
  longitude    Float
  elementId    String?
  buildingCode String?
  floorLevel   String?
  outEdges     Edge[]   @relation("OutEdges")
  inEdges      Edge[]   @relation("InEdges")
  floor        Floor?   @relation(fields: [buildingCode, floorLevel], references: [buildingCode, floorLevel])
  element      Element? @relation(fields: [elementId], references: [elementId])

  @@index([buildingCode, floorLevel])
}

model Edge {
  inNodeId  String
  outNodeId String
  inNode    Node   @relation("OutEdges", fields: [inNodeId], references: [id])
  outNode   Node   @relation("InEdges", fields: [outNodeId], references: [id])

  @@id([inNodeId, outNodeId])
}

model Alias {
  alias  String
  roomId String
  room   Room   @relation(fields: [roomId], references: [elementId])

  @@id([roomId, alias])
}
